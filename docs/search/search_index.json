{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 ToDone API Documentation!","text":"<p>\u042d\u0442\u043e\u0442 \u0441\u0430\u0439\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0434\u043b\u044f ToDone API - API \u0434\u043b\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0437\u0430\u0434\u0430\u0447.</p>"},{"location":"#_1","title":"\u041e\u0431\u0437\u043e\u0440","text":"<p>ToDone API \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c, \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c, \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0438 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0438\u0445 \u0437\u0430\u0434\u0430\u0447\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0442\u043e\u0447\u043a\u0438 API.</p>"},{"location":"#mainpy","title":"main.py","text":"<pre><code>from fastapi import FastAPI\nfrom connection import *\nfrom routes.task_routes import router as task_router\nfrom routes.user_routes import router as user_router\n\napp = FastAPI(\n    title=\"ToDone\",\n    description=\"API \u0434\u043b\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0437\u0430\u0434\u0430\u0447\",\n    version=\"1.0.0\"\n)\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    print(\"Initializing database...\")\n    init_db()\n    print(\"Database initialized.\")\n\n\nuser_tags_metadata = {\"Operations related to users\"}\ntask_tags_metadata = {\"Operations related to tasks\"}\n\napp.include_router(user_router, tags=[user_tags_metadata])\napp.include_router(task_router, tags=[task_tags_metadata])\n</code></pre>"},{"location":"#_2","title":"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b","text":"<ul> <li>API \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439: \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0442\u043e\u0447\u0435\u043a, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438.</li> <li>API \u0437\u0430\u0434\u0430\u0447: \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0442\u043e\u0447\u0435\u043a, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438.</li> <li>Models: \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u0430\u043d\u043d\u044b\u0445</li> <li>Schemas: Pydantic-\u0441\u0445\u0435\u043c\u044b</li> </ul>"},{"location":"#_3","title":"(\u043f\u043e\u043a\u0430 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435)","text":""},{"location":"#api","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a API","text":"<p>\u0414\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a API \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u044b\u0442\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0442\u043e\u043a\u0435\u043d\u0443 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0443\u044e \u0442\u043e\u0447\u043a\u0443 <code>/token</code>, \u0430 \u0437\u0430\u0442\u0435\u043c \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u044d\u0442\u043e\u0442 \u0442\u043e\u043a\u0435\u043d \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>Authorization</code> \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a API.</p>"},{"location":"#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"#_5","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439","text":""},{"location":"Docker/","title":"Docker","text":"<p>\u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 Docker-\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u044f \u0441\u043e\u0437\u0434\u0430\u043b\u0430 \u0444\u0430\u0439\u043b requirements.txt, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0432\u0441\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <p>\u0414\u0430\u043b\u0435\u0435 \u0431\u044b\u043b \u043d\u0430\u043f\u0438\u0441\u0430\u043d Dockerfile:</p> <pre><code>FROM python:3.10-slim\n\nRUN mkdir /fastapi_app\n\nWORKDIR /fastapi_app\n\nCOPY requirements.txt .\n\nRUN pip install -r requirements.txt\n\nCOPY . .\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre> <p>\u0422\u0430\u043a\u0436\u0435 \u0431\u044b\u043b \u043d\u0430\u043f\u0438\u0441\u0430\u043d doker-compose.yml:</p> <pre><code>version: \"3.8\"\n\nservices:\n  db:\n    image: postgres:14\n    container_name: db_app\n    ports:\n      - \"5433:5432\"\n    environment:\n      POSTGRES_DB: todo\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: Aliya2103\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\n  fastapi:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    container_name: fastapi_app\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - db\n    environment:\n      DATABASE_URL: postgresql://postgres:Aliya2103@db:5432/todo\n\nvolumes:\n  postgres_data:\n</code></pre> <p>\u0414\u0430\u043b\u0435\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438:</p> <pre><code>docker compose build\ndocker compose up\n</code></pre> <p>\u0411\u044b\u043b\u0438 \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u044b 2 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0434\u043b\u044f \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 Docker-\u0435.</p>"},{"location":"models/","title":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 ToDone API","text":"<pre><code>from datetime import datetime, date\nfrom sqlmodel import Field, Relationship, SQLModel\nfrom typing import List, Optional\n\nclass User(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    username: str = Field(index=True)\n    hashed_password: str\n    password: Optional[str] = Field(default=None, exclude=True)\n    is_active: bool = Field(default=True)\n    tasks: List[\"Task\"] = Relationship(back_populates=\"owner\")\n\nclass TaskCategory(SQLModel, table=True):\n    task_id: int = Field(foreign_key=\"task.id\", primary_key=True)\n    category_id: int = Field(foreign_key=\"category.id\", primary_key=True)\n    additional_info: str\n    task: \"Task\" = Relationship(back_populates=\"task_categories\")\n    category: \"Category\" = Relationship(back_populates=\"category_tasks\")\n\nclass Task(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    title: str\n    description: str\n    deadline: Optional[date] = None\n    priority: int = Field(default=1)\n    user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\")\n    owner: User = Relationship(back_populates=\"tasks\")\n    task_categories: List[TaskCategory] = Relationship(back_populates=\"task\")\n    time_logs: List[\"TimeLog\"] = Relationship(back_populates=\"task\")\n\nclass Category(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    category_tasks: List[TaskCategory] = Relationship(back_populates=\"category\")\n\nclass TimeLog(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    task_id: int = Field(foreign_key=\"task.id\")\n    time_spent_minutes: int\n    date_logged: date\n    task: Task = Relationship(back_populates=\"time_logs\")\n\nmetadata = SQLModel.metadata\n</code></pre>"},{"location":"schemas/","title":"\u0421\u0445\u0435\u043c\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430","text":"<pre><code>from datetime import date\n\nfrom pydantic import BaseModel\nfrom typing import Optional, List\n\n# \u0421\u0445\u0435\u043c\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\nclass UserCreate(BaseModel):\n    username: str\n    hashed_password: str\n    is_active: Optional[bool] = True\n\n# \u0421\u0445\u0435\u043c\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\nclass UserRead(BaseModel):\n    id: int\n    username: str\n    is_active: bool\n\n# \u0421\u0445\u0435\u043c\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\nclass UserUpdate(BaseModel):\n    username: Optional[str] = None\n    hashed_password: Optional[str] = None\n    is_active: Optional[bool] = None\n\nclass UserLogin(BaseModel):\n    username: str\n    password: str\n\nclass UserList(BaseModel):\n    users: List[UserRead]\n\n\nclass TaskBase(BaseModel):\n    title: str\n    description: str\n    deadline: date\n    priority: int\n    user_id: int\n\nclass TaskCreate(TaskBase):\n    pass\n\nclass TaskUpdate(BaseModel):\n    title: Optional[str] = None\n    description: Optional[str] = None\n    deadline: Optional[date] = None\n    priority: Optional[int] = None\n\nclass Task(TaskBase):\n    id: int\n\n    class Config:\n        orm_mode = True\n\nclass TaskList(BaseModel):\n    tasks: List[Task]\n\nclass TimeLog(BaseModel):\n    id: int\n    task_id: int\n    time_spent_minutes: int\n    date_logged: date\n\n    class Config:\n        orm_mode = True\n\nclass TaskWithTimeLogs(BaseModel):\n    task: Task\n    time_logs: List[TimeLog]\n\nclass TaskWithTimeLogsList(BaseModel):\n    tasks: List[TaskWithTimeLogs]\n</code></pre>"},{"location":"schemas/#_2","title":"\u0422\u0430\u043a\u0436\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445","text":"<pre><code>from datetime import date\n\nfrom sqlalchemy.orm import Session\nimport models\nimport schemas\nfrom auth import auth\n\n\ndef create_user(db: Session, user: schemas.UserCreate):\n    hashed_password = auth.get_password_hash(user.password)  # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043f\u0430\u0440\u043e\u043b\u044c \u0445\u044d\u0448\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\n    db_user = models.User(username=user.username, hashed_password=hashed_password)\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n\ndef get_user(db: Session, user_id: int):\n    return db.query(models.User).filter(models.User.id == user_id).first()\n\n\ndef get_user_by_username(db: Session, username: str):\n    return db.query(models.User).filter(models.User.username == username).first()\n\n\ndef update_user(db: Session, user_id: int, username: str, hashed_password: str, is_active: bool = True):\n    db_user = db.query(models.User).filter(models.User.id == user_id).first()\n    if db_user:\n        db_user.username = username\n        db_user.hashed_password = hashed_password\n        db_user.is_active = is_active\n        db.commit()\n        db.refresh(db_user)\n        return db_user\n    return None\n\n\ndef delete_user(db: Session, user_id: int):\n    db_user = db.query(models.User).filter(models.User.id == user_id).first()\n    if db_user:\n        db.delete(db_user)\n        db.commit()\n        return db_user\n    return None\n\n\ndef get_all_users(db: Session):\n    return db.query(models.User).all()\n\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438\ndef create_task(db: Session, title: str, description: str, deadline: date, priority: int, user_id: int):\n    new_task = models.Task(title=title, description=description, deadline=deadline, priority=priority, user_id=user_id)\n    db.add(new_task)\n    db.commit()\n    db.refresh(new_task)\n    return new_task\n\n\n# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443\ndef get_task(db: Session, task_id: int):\n    return db.query(models.Task).filter(models.Task.id == task_id).first()\n\n\n# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447\ndef get_all_tasks(db: Session):\n    return db.query(models.Task).all()\n\n\n# \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438\ndef update_task(db: Session, task_id: int, title: str, description: str, deadline: date, priority: int):\n    task = db.query(models.Task).filter(models.Task.id == task_id).first()\n    if task:\n        task.title = title\n        task.description = description\n        task.deadline = deadline\n        task.priority = priority\n        db.commit()\n        db.refresh(task)\n    return task\n\n\n# \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438\ndef delete_task(db: Session, task_id: int):\n    task = db.query(models.Task).filter(models.Task.id == task_id).first()\n    if task:\n        db.delete(task)\n        db.commit()\n    return task\n\n\ndef get_user_tasks(db: Session, user_id: int):\n    return db.query(models.Task).filter(models.Task.user_id == user_id).all()\n\n\ndef get_user_by_task_id(db: Session, task_id: int):\n    task = db.query(models.Task).filter(models.Task.id == task_id).first()\n    if not task:\n        return None\n    return task.owner\n\n\ndef get_tasks_with_time_logs(db: Session, task_id: int):\n    task = db.query(models.Task).filter(models.Task.id == task_id).first()\n    if not task:\n        return None\n    return [{\"task\": task, \"time_logs\": task.time_logs}]\n\n\ndef add_time_log(db: Session, task_id: int, time_spent_minutes: int, date_logged: date):\n    time_log = models.TimeLog(task_id=task_id, time_spent_minutes=time_spent_minutes, date_logged=date_logged)\n    db.add(time_log)\n    db.commit()\n    db.refresh(time_log)\n    return time_log\n\n\ndef get_time_logs_for_task(db: Session, task_id: int):\n    return db.query(models.TimeLog).filter(models.TimeLog.task_id == task_id).all()\n</code></pre>"},{"location":"task1/","title":"task1","text":""},{"location":"task1/#1-threading-multiprocessing-async-python","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python\u044f","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:</p> <p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.</p>"},{"location":"task1/#threading","title":"threading","text":"<pre><code>import threading\nimport time\n\ndef calculate_sum(start, end, result):\n    partial_sum = sum(range(start, end))\n    result.append(partial_sum)\n\ndef main():\n    result = []\n    thread1 = threading.Thread(target=calculate_sum, args=(1, 500001, result))\n    thread2 = threading.Thread(target=calculate_sum, args=(500001, 1000001, result))\n\n    start_time = time.time()\n\n    thread1.start()\n    thread2.start()\n\n    thread1.join()\n    thread2.join()\n\n    total_sum = sum(result)\n\n    end_time = time.time()\n    execution_time = end_time - start_time\n\n    print(\"Total sum using threading:\", total_sum)\n    print(\"Execution time:\", execution_time, \"seconds\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"task1/#multiprocessing","title":"multiprocessing","text":"<pre><code>from multiprocessing import Process, Queue\nimport time\n\ndef calculate_sum(start, end, result):\n    partial_sum = sum(range(start, end))\n    result.put(partial_sum)\n\ndef main():\n    result = Queue()\n    process1 = Process(target=calculate_sum, args=(1, 500001, result))\n    process2 = Process(target=calculate_sum, args=(500001, 1000001, result))\n\n    start_time = time.time()\n\n    process1.start()\n    process2.start()\n\n    process1.join()\n    process2.join()\n\n    total_sum = 0\n    while not result.empty():\n        total_sum += result.get()\n\n    end_time = time.time()\n    execution_time = end_time - start_time\n\n    print(\"Total sum using multiprocessing:\", total_sum)\n    print(\"Execution time:\", execution_time, \"seconds\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"task1/#async","title":"async","text":"<pre><code>import asyncio\nimport time\n\nasync def calculate_sum(start, end):\n    return sum(range(start, end))\n\nasync def main():\n    task1 = asyncio.create_task(calculate_sum(1, 500001))\n    task2 = asyncio.create_task(calculate_sum(500001, 1000001))\n\n    start_time = time.time()\n\n    result1 = await task1\n    result2 = await task2\n\n    total_sum = result1 + result2\n\n    end_time = time.time()\n    execution_time = end_time - start_time\n\n    print(\"Total sum using async:\", total_sum)\n    print(\"Execution time:\", execution_time, \"seconds\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"task2/","title":"task2","text":""},{"location":"task2/#2-","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:</p> <p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.</p>"},{"location":"task2/#threading","title":"threading","text":"<pre><code>import threading\nimport requests\nimport psycopg2\nfrom time import time\n\ndef save_to_db(data):\n    conn = psycopg2.connect(\"dbname=openalex_db user=postgres password=Aliya2103 host=localhost\")\n    cur = conn.cursor()\n    for record in data:\n        cur.execute(\n            \"INSERT INTO openalex_data (id, title, abstract, domain) VALUES (%s, %s, %s, %s)\",\n            (record['id'], record['title'], record['abstract'], record['domain'])\n        )\n    conn.commit()\n    cur.close()\n    conn.close()\n\ndef dict_to_sentence(dictionary):\n    sentence_words = [''] * (max(max(indices) for indices in dictionary.values()) + 1)\n    for word, indices in dictionary.items():\n        for index in indices:\n            sentence_words[index] = word\n    return ' '.join(sentence_words)\n\ndef parse_and_save(url):\n    response = requests.get(url)\n    page_with_results = response.json()\n    all_data = []\n    if 'results' in page_with_results:\n        for result in page_with_results['results']:\n            primary_topic = result.get('primary_topic')\n            if primary_topic:\n                domain_display_name = primary_topic.get('domain', {}).get('display_name', '')\n            else:\n                domain_display_name = ''\n            if domain_display_name:\n                title = result.get('title')\n                if title:\n                    record = {'id': result['id'].replace(\"https://openalex.org/\", \"\"), 'domain': domain_display_name}\n                    for key, value in result.items():\n                        if key != 'id':\n                            record[key] = value\n                    if 'abstract_inverted_index' in record and record['abstract_inverted_index']:\n                        record['abstract'] = dict_to_sentence(record['abstract_inverted_index'])\n                        all_data.append(record)\n    save_to_db(all_data)\n\ndef main_threading():\n    start_time = time()\n    urls = [f'https://api.openalex.org/works?page={i}&amp;per-page=200' for i in range(1, 7)]\n    threads = []\n\n    for url in urls:\n        thread = threading.Thread(target=parse_and_save, args=(url,))\n        thread.start()\n        threads.append(thread)\n\n    for thread in threads:\n        thread.join()\n\n    print(f\"Time taken (threading): {time() - start_time} seconds\")\n\nif __name__ == \"__main__\":\n    main_threading()\n</code></pre>"},{"location":"task2/#multiprocessing","title":"multiprocessing","text":"<pre><code>import multiprocessing\nimport requests\nimport psycopg2\nfrom time import time\n\n\ndef save_to_db(data):\n    conn = psycopg2.connect(\"dbname=openalex_db user=postgres password=Aliya2103 host=localhost\")\n    cur = conn.cursor()\n    for record in data:\n        cur.execute(\n            \"INSERT INTO openalex_data (id, title, abstract, domain) VALUES (%s, %s, %s, %s)\",\n            (record['id'], record['title'], record['abstract'], record['domain'])\n        )\n    conn.commit()\n    cur.close()\n    conn.close()\n\ndef dict_to_sentence(dictionary):\n    sentence_words = [''] * (max(max(indices) for indices in dictionary.values()) + 1)\n    for word, indices in dictionary.items():\n        for index in indices:\n            sentence_words[index] = word\n    return ' '.join(sentence_words)\n\ndef parse_and_save(url):\n    response = requests.get(url)\n    page_with_results = response.json()\n    all_data = []\n    if 'results' in page_with_results:\n        for result in page_with_results['results']:\n            primary_topic = result.get('primary_topic')\n            if primary_topic:\n                domain_display_name = primary_topic.get('domain', {}).get('display_name', '')\n            else:\n                domain_display_name = ''\n            if domain_display_name:\n                title = result.get('title')\n                if title:\n                    record = {'id': result['id'].replace(\"https://openalex.org/\", \"\"), 'domain': domain_display_name}\n                    for key, value in result.items():\n                        if key != 'id':\n                            record[key] = value\n                    if 'abstract_inverted_index' in record and record['abstract_inverted_index']:\n                        record['abstract'] = dict_to_sentence(record['abstract_inverted_index'])\n                        all_data.append(record)\n    save_to_db(all_data)\n\ndef main_multiprocessing():\n    start_time = time()\n    urls = [f'https://api.openalex.org/works?page={i}&amp;per-page=200' for i in range(7, 13)]\n    processes = []\n\n    for url in urls:\n        process = multiprocessing.Process(target=parse_and_save, args=(url,))\n        process.start()\n        processes.append(process)\n\n    for process in processes:\n        process.join()\n\n    print(f\"Time taken (multiprocessing): {time() - start_time} seconds\")\n\nif __name__ == \"__main__\":\n    main_multiprocessing()\n</code></pre>"},{"location":"task2/#async","title":"async","text":"<pre><code>import aiohttp\nimport asyncio\nimport asyncpg\nimport psycopg2\nfrom time import time\n\ndef create_aiohttp_session():\n    return aiohttp.ClientSession()\n\n\nasync def save_to_db(data):\n    conn = await asyncpg.connect('postgresql://postgres:Aliya2103@localhost:5432/openalex_db')\n    try:\n        for record in data:\n            await conn.execute(\n                \"INSERT INTO openalex_data (id, title, abstract, domain) VALUES ($1, $2, $3, $4)\",\n                record['id'], record['title'], record['abstract'], record['domain']\n            )\n    finally:\n        await conn.close()\n\nasync def dict_to_sentence(dictionary):\n    sentence_words = [''] * (max(max(indices) for indices in dictionary.values()) + 1)\n    for word, indices in dictionary.items():\n        for index in indices:\n            sentence_words[index] = word\n    return ' '.join(sentence_words)\n\nasync def parse_and_save(url):\n    async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False)) as session:\n        async with session.get(url) as response:\n            page_with_results = await response.json()\n            all_data = []\n            if 'results' in page_with_results:\n                for result in page_with_results['results']:\n                    primary_topic = result.get('primary_topic')\n                    if primary_topic:\n                        domain_display_name = primary_topic.get('domain', {}).get('display_name', '')\n                    else:\n                        domain_display_name = ''\n                    if domain_display_name:\n                        title = result.get('title')\n                        if title:\n                            record = {'id': result['id'].replace(\"https://openalex.org/\", \"\"),\n                                      'domain': domain_display_name}\n                            for key, value in result.items():\n                                if key != 'id':\n                                    record[key] = value\n                            if 'abstract_inverted_index' in record and record['abstract_inverted_index']:\n                                record['abstract'] = await dict_to_sentence(record['abstract_inverted_index'])\n                                all_data.append(record)\n            await save_to_db(all_data)\n\nasync def main_async():\n    start_time = time()\n    urls = [f'https://api.openalex.org/works?page={i}&amp;per-page=200' for i in range(20, 26)]\n    tasks = [parse_and_save(url) for url in urls]\n    await asyncio.gather(*tasks)\n    print(f\"Time taken (async): {time() - start_time} seconds\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main_async())\n</code></pre> <ul> <li>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c\u043e\u0435 \u0432 \u043f\u043e\u0434\u0445\u043e\u0434\u0435 \u0441 async, \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c multiprocessing \u0438 threading. \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0434\u0430\u0447 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0431\u0435\u0437 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430, \u0447\u0442\u043e \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0434\u043b\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446.</li> </ul>"},{"location":"task_endpoints/","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447","text":"<pre><code>from fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom to_do_app import crud\nimport models\nfrom connection import get_session\nfrom schemas import *\n\nrouter = APIRouter()\n\n\n@router.post(\"/tasks/\",\n             response_model=Task,\n             status_code=status.HTTP_201_CREATED,\n             tags=[\"Tasks\"],  # \u0422\u0435\u0433\u0438 \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438\n             summary=\"Create a new task\",  # \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430\n             description=\"Create a new task with the provided data.\",\n             responses={  # \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043e\u0442\u0432\u0435\u0442\u043e\u0432\n                 201: {\"description\": \"Task created successfully\"},\n                 400: {\"description\": \"Invalid data provided\"},\n                 500: {\"description\": \"Internal server error\"},\n             })\ndef create_task(task_data: TaskCreate, db: Session = Depends(get_session)):\n    return crud.create_task(db=db, **task_data.dict())\n\n\n@router.get(\"/tasks/{task_id}\", response_model=Task)\ndef read_task(task_id: int, db: Session = Depends(get_session)):\n    db_task = crud.get_task(db, task_id=task_id)\n    if db_task is None:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n    return db_task\n\n\n@router.get(\"/tasks/\", response_model=TaskList)\ndef read_all_tasks(db: Session = Depends(get_session)):\n    tasks = crud.get_all_tasks(db)\n    return {\"tasks\": tasks}\n\n\n@router.put(\"/tasks/{task_id}\", response_model=Task)\ndef update_task(task_id: int, task_data: TaskUpdate, db: Session = Depends(get_session)):\n    db_task = crud.get_task(db, task_id=task_id)\n    if db_task is None:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n    return crud.update_task(db=db, task_id=task_id, **task_data.dict(exclude_unset=True))\n\n\n@router.delete(\"/tasks/{task_id}\", response_model=Task)\ndef delete_task(task_id: int, db: Session = Depends(get_session)):\n    db_task = crud.get_task(db, task_id=task_id)\n    if db_task is None:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n    return crud.delete_task(db=db, task_id=task_id)\n\n\n@router.get(\"/tasks/user/{user_id}\", response_model=TaskList)\ndef read_user_tasks(user_id: int, db: Session = Depends(get_session)):\n    tasks = crud.get_user_tasks(db, user_id)\n    if not tasks:\n        raise HTTPException(status_code=404, detail=\"User has no tasks\")\n    return {\"tasks\": tasks}\n\n\n@router.get(\"/tasks/{task_id}/user\", response_model=UserRead)\ndef read_user_by_task_id(task_id: int, db: Session = Depends(get_session)):\n    user = crud.get_user_by_task_id(db, task_id)\n    if not user:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n    return user\n\n\n@router.get(\"/tasks-with-time-logs/{task_id}\", response_model=TaskWithTimeLogsList)\ndef read_tasks_with_time_logs(task_id: int, db: Session = Depends(get_session)):\n    tasks = crud.get_tasks_with_time_logs(db, task_id)\n    if not tasks:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n    return {\"tasks\": tasks}\n\n\n@router.post(\"/tasks/{task_id}/add-time-log\")\ndef add_time_log_to_task(task_id: int, time_spent_minutes: int, date_logged: date, db: Session = Depends(get_session)):\n    return crud.add_time_log(db, task_id, time_spent_minutes, date_logged)\n\n\n@router.get(\"/tasks/{task_id}/time-logs\")\ndef get_time_logs_for_task(task_id: int, db: Session = Depends(get_session)):\n    return crud.get_time_logs_for_task(db, task_id)\n</code></pre>"},{"location":"user_endpoints/","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","text":"<pre><code>from fastapi import APIRouter, Depends, HTTPException, status\nfrom fastapi.exceptions import RequestValidationError\nimport jwt\nfrom sqlalchemy.orm import Session\nimport schemas\nimport crud\nimport models\nfrom auth import auth\nfrom connection import get_session\nfrom schemas import *\nimport auth.auth\n\nrouter = APIRouter()\n\n\n@router.post(\"/register\", response_model=schemas.UserCreate)\ndef register_user(user: schemas.UserCreate, db: Session = Depends(get_session)):\n    db_user = crud.get_user_by_username(db, username=user.username)\n    if db_user:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Username already registered\")\n    return auth.create_user(db=db, user=user)\n\n\n@router.post(\"/login\")\ndef login_user(user: schemas.UserLogin, db: Session = Depends(get_session)):\n    try:\n        authenticated_user = auth.authenticate_user(db=db, username=user.username, password=user.password)\n        if not authenticated_user:\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Invalid username or password\")\n        access_token = auth.create_access_token(data={\"sub\": authenticated_user.username})\n        return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n    except RequestValidationError as e:\n        raise HTTPException(status_code=422, detail=\"Validation error\", headers=e.headers)\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n\n\nasync def get_current_user(db: Session = Depends(get_session), token: str = Depends(auth.oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, auth.SECRET_KEY, algorithms=[auth.ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n    except jwt.JWTError:\n        raise credentials_exception\n    user = crud.get_user_by_username(db, username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\n@router.post(\"/users/\",\n             response_model=UserRead,\n             status_code=status.HTTP_201_CREATED,\n             tags=[\"Users\"],  # \u0422\u0435\u0433\u0438 \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438\n             summary=\"Create a new user\",  # \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430\n             description=\"Create a new user with the provided data.\",\n             responses={  # \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043e\u0442\u0432\u0435\u0442\u043e\u0432\n                 201: {\"description\": \"User created successfully\"},\n                 400: {\"description\": \"Invalid data provided\"},\n                 409: {\"description\": \"User with this username already exists\"},\n                 500: {\"description\": \"Internal server error\"},\n             }\n             )\ndef create_user(user_data: UserCreate, db: Session = Depends(get_session)):\n    return crud.create_user(db=db, **user_data.dict())  # \u0420\u0430\u0441\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0441\u0445\u0435\u043c\u044b UserCreate\n\n\n@router.get(\"/users/{user_id}\", response_model=UserRead)  # \u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c, \u0447\u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c - UserRead\ndef read_user(user_id: int, db: Session = Depends(get_session)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@router.put(\"/users/{user_id}\", response_model=UserRead)  # \u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c, \u0447\u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c - UserRead\ndef update_user(user_id: int, user_data: UserUpdate, db: Session = Depends(get_session)):\n    return crud.update_user(db=db, user_id=user_id, **user_data.dict(\n        exclude_unset=True))  # \u0420\u0430\u0441\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0441\u0445\u0435\u043c\u044b UserUpdate, \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044f \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n\n\n@router.delete(\"/users/{user_id}\", response_model=UserRead)  # \u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c, \u0447\u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c - UserRead\ndef delete_user(user_id: int, db: Session = Depends(get_session)):\n    return crud.delete_user(db=db, user_id=user_id)\n\n\n@router.get(\"/users/\", response_model=UserList)\ndef read_users(db: Session = Depends(get_session)):\n    users = crud.get_all_users(db)\n    return {\"users\": users}\n</code></pre>"}]}